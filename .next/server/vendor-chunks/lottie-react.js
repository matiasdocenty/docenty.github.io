"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/lottie-react";
exports.ids = ["vendor-chunks/lottie-react"];
exports.modules = {

/***/ "(ssr)/./node_modules/lottie-react/build/index.es.js":
/*!*****************************************************!*\
  !*** ./node_modules/lottie-react/build/index.es.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LottiePlayer: () => (/* reexport default from dynamic */ lottie_web__WEBPACK_IMPORTED_MODULE_0___default.a),\n/* harmony export */   \"default\": () => (/* binding */ Lottie),\n/* harmony export */   useLottie: () => (/* binding */ useLottie),\n/* harmony export */   useLottieInteractivity: () => (/* binding */ useLottieInteractivity)\n/* harmony export */ });\n/* harmony import */ var lottie_web__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lottie-web */ \"(ssr)/./node_modules/lottie-web/build/player/lottie.js\");\n/* harmony import */ var lottie_web__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lottie_web__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (null != _i) {\n        var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1;\n        try {\n            if (_x = (_i = _i.call(arr)).next, 0 === i) {\n                if (Object(_i) !== _i) return;\n                _n = !1;\n            } else for(; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n        } catch (err) {\n            _d = !0, _e = err;\n        } finally{\n            try {\n                if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n            } finally{\n                if (_d) throw _e;\n            }\n        }\n        return _arr;\n    }\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread2(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n}\nvar _excluded$1 = [\n    \"animationData\",\n    \"loop\",\n    \"autoplay\",\n    \"initialSegment\",\n    \"onComplete\",\n    \"onLoopComplete\",\n    \"onEnterFrame\",\n    \"onSegmentStart\",\n    \"onConfigReady\",\n    \"onDataReady\",\n    \"onDataFailed\",\n    \"onLoadedImages\",\n    \"onDOMLoaded\",\n    \"onDestroy\",\n    \"lottieRef\",\n    \"renderer\",\n    \"name\",\n    \"assetsPath\",\n    \"rendererSettings\"\n];\nvar useLottie = function useLottie(props, style) {\n    var animationData = props.animationData, loop = props.loop, autoplay = props.autoplay, initialSegment = props.initialSegment, onComplete = props.onComplete, onLoopComplete = props.onLoopComplete, onEnterFrame = props.onEnterFrame, onSegmentStart = props.onSegmentStart, onConfigReady = props.onConfigReady, onDataReady = props.onDataReady, onDataFailed = props.onDataFailed, onLoadedImages = props.onLoadedImages, onDOMLoaded = props.onDOMLoaded, onDestroy = props.onDestroy;\n    props.lottieRef;\n    props.renderer;\n    props.name;\n    props.assetsPath;\n    props.rendererSettings;\n    var rest = _objectWithoutProperties(props, _excluded$1);\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false), _useState2 = _slicedToArray(_useState, 2), animationLoaded = _useState2[0], setAnimationLoaded = _useState2[1];\n    var animationInstanceRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    var animationContainer = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    /*\n        ======================================\n            INTERACTION METHODS\n        ======================================\n     */ /**\n   * Play\n   */ var play = function play() {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.play();\n    };\n    /**\n   * Stop\n   */ var stop = function stop() {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.stop();\n    };\n    /**\n   * Pause\n   */ var pause = function pause() {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.pause();\n    };\n    /**\n   * Set animation speed\n   * @param speed\n   */ var setSpeed = function setSpeed(speed) {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setSpeed(speed);\n    };\n    /**\n   * Got to frame and play\n   * @param value\n   * @param isFrame\n   */ var goToAndPlay = function goToAndPlay(value, isFrame) {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.goToAndPlay(value, isFrame);\n    };\n    /**\n   * Got to frame and stop\n   * @param value\n   * @param isFrame\n   */ var goToAndStop = function goToAndStop(value, isFrame) {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.goToAndStop(value, isFrame);\n    };\n    /**\n   * Set animation direction\n   * @param direction\n   */ var setDirection = function setDirection(direction) {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setDirection(direction);\n    };\n    /**\n   * Play animation segments\n   * @param segments\n   * @param forceFlag\n   */ var playSegments = function playSegments(segments, forceFlag) {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.playSegments(segments, forceFlag);\n    };\n    /**\n   * Set sub frames\n   * @param useSubFrames\n   */ var setSubframe = function setSubframe(useSubFrames) {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setSubframe(useSubFrames);\n    };\n    /**\n   * Get animation duration\n   * @param inFrames\n   */ var getDuration = function getDuration(inFrames) {\n        var _a;\n        return (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.getDuration(inFrames);\n    };\n    /**\n   * Destroy animation\n   */ var destroy = function destroy() {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy();\n        // Removing the reference to the animation so separate cleanups are skipped.\n        // Without it the internal `lottie-react` instance throws exceptions as it already cleared itself on destroy.\n        animationInstanceRef.current = undefined;\n    };\n    /*\n        ======================================\n            LOTTIE\n        ======================================\n     */ /**\n   * Load a new animation, and if it's the case, destroy the previous one\n   * @param {Object} forcedConfigs\n   */ var loadAnimation = function loadAnimation() {\n        var forcedConfigs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var _a;\n        // Return if the container ref is null\n        if (!animationContainer.current) {\n            return;\n        }\n        // Destroy any previous instance\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy();\n        // Build the animation configuration\n        var config = _objectSpread2(_objectSpread2(_objectSpread2({}, props), forcedConfigs), {}, {\n            container: animationContainer.current\n        });\n        // Save the animation instance\n        animationInstanceRef.current = lottie_web__WEBPACK_IMPORTED_MODULE_0___default().loadAnimation(config);\n        setAnimationLoaded(!!animationInstanceRef.current);\n        // Return a function that will clean up\n        return function() {\n            var _a;\n            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy();\n            animationInstanceRef.current = undefined;\n        };\n    };\n    /**\n   * (Re)Initialize when animation data changed\n   */ (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        var onUnmount = loadAnimation();\n        // Clean up on unmount\n        return function() {\n            return onUnmount === null || onUnmount === void 0 ? void 0 : onUnmount();\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        animationData,\n        loop\n    ]);\n    // Update the autoplay state\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        if (!animationInstanceRef.current) {\n            return;\n        }\n        animationInstanceRef.current.autoplay = !!autoplay;\n    }, [\n        autoplay\n    ]);\n    // Update the initial segment state\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        if (!animationInstanceRef.current) {\n            return;\n        }\n        // When null should reset to default animation length\n        if (!initialSegment) {\n            animationInstanceRef.current.resetSegments(true);\n            return;\n        }\n        // If it's not a valid segment, do nothing\n        if (!Array.isArray(initialSegment) || !initialSegment.length) {\n            return;\n        }\n        // If the current position it's not in the new segment\n        // set the current position to start\n        if (animationInstanceRef.current.currentRawFrame < initialSegment[0] || animationInstanceRef.current.currentRawFrame > initialSegment[1]) {\n            animationInstanceRef.current.currentRawFrame = initialSegment[0];\n        }\n        // Update the segment\n        animationInstanceRef.current.setSegment(initialSegment[0], initialSegment[1]);\n    }, [\n        initialSegment\n    ]);\n    /*\n        ======================================\n            EVENTS\n        ======================================\n     */ /**\n   * Reinitialize listener on change\n   */ (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        var partialListeners = [\n            {\n                name: \"complete\",\n                handler: onComplete\n            },\n            {\n                name: \"loopComplete\",\n                handler: onLoopComplete\n            },\n            {\n                name: \"enterFrame\",\n                handler: onEnterFrame\n            },\n            {\n                name: \"segmentStart\",\n                handler: onSegmentStart\n            },\n            {\n                name: \"config_ready\",\n                handler: onConfigReady\n            },\n            {\n                name: \"data_ready\",\n                handler: onDataReady\n            },\n            {\n                name: \"data_failed\",\n                handler: onDataFailed\n            },\n            {\n                name: \"loaded_images\",\n                handler: onLoadedImages\n            },\n            {\n                name: \"DOMLoaded\",\n                handler: onDOMLoaded\n            },\n            {\n                name: \"destroy\",\n                handler: onDestroy\n            }\n        ];\n        var listeners = partialListeners.filter(function(listener) {\n            return listener.handler != null;\n        });\n        if (!listeners.length) {\n            return;\n        }\n        var deregisterList = listeners.map(/**\n     * Handle the process of adding an event listener\n     * @param {Listener} listener\n     * @return {Function} Function that deregister the listener\n     */ function(listener) {\n            var _a;\n            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener(listener.name, listener.handler);\n            // Return a function to deregister this listener\n            return function() {\n                var _a;\n                (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener(listener.name, listener.handler);\n            };\n        });\n        // Deregister listeners on unmount\n        return function() {\n            deregisterList.forEach(function(deregister) {\n                return deregister();\n            });\n        };\n    }, [\n        onComplete,\n        onLoopComplete,\n        onEnterFrame,\n        onSegmentStart,\n        onConfigReady,\n        onDataReady,\n        onDataFailed,\n        onLoadedImages,\n        onDOMLoaded,\n        onDestroy\n    ]);\n    /**\n   * Build the animation view\n   */ var View = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", _objectSpread2({\n        style: style,\n        ref: animationContainer\n    }, rest));\n    return {\n        View: View,\n        play: play,\n        stop: stop,\n        pause: pause,\n        setSpeed: setSpeed,\n        goToAndStop: goToAndStop,\n        goToAndPlay: goToAndPlay,\n        setDirection: setDirection,\n        playSegments: playSegments,\n        setSubframe: setSubframe,\n        getDuration: getDuration,\n        destroy: destroy,\n        animationContainerRef: animationContainer,\n        animationLoaded: animationLoaded,\n        animationItem: animationInstanceRef.current\n    };\n};\n// helpers\nfunction getContainerVisibility(container) {\n    var _container$getBoundin = container.getBoundingClientRect(), top = _container$getBoundin.top, height = _container$getBoundin.height;\n    var current = window.innerHeight - top;\n    var max = window.innerHeight + height;\n    return current / max;\n}\nfunction getContainerCursorPosition(container, cursorX, cursorY) {\n    var _container$getBoundin2 = container.getBoundingClientRect(), top = _container$getBoundin2.top, left = _container$getBoundin2.left, width = _container$getBoundin2.width, height = _container$getBoundin2.height;\n    var x = (cursorX - left) / width;\n    var y = (cursorY - top) / height;\n    return {\n        x: x,\n        y: y\n    };\n}\nvar useInitInteractivity = function useInitInteractivity(_ref) {\n    var wrapperRef = _ref.wrapperRef, animationItem = _ref.animationItem, mode = _ref.mode, actions = _ref.actions;\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        var wrapper = wrapperRef.current;\n        if (!wrapper || !animationItem || !actions.length) {\n            return;\n        }\n        animationItem.stop();\n        var scrollModeHandler = function scrollModeHandler() {\n            var assignedSegment = null;\n            var scrollHandler = function scrollHandler() {\n                var currentPercent = getContainerVisibility(wrapper);\n                // Find the first action that satisfies the current position conditions\n                var action = actions.find(function(_ref2) {\n                    var visibility = _ref2.visibility;\n                    return visibility && currentPercent >= visibility[0] && currentPercent <= visibility[1];\n                });\n                // Skip if no matching action was found!\n                if (!action) {\n                    return;\n                }\n                if (action.type === \"seek\" && action.visibility && action.frames.length === 2) {\n                    // Seek: Go to a frame based on player scroll position action\n                    var frameToGo = action.frames[0] + Math.ceil((currentPercent - action.visibility[0]) / (action.visibility[1] - action.visibility[0]) * action.frames[1]);\n                    //! goToAndStop must be relative to the start of the current segment\n                    animationItem.goToAndStop(frameToGo - animationItem.firstFrame - 1, true);\n                }\n                if (action.type === \"loop\") {\n                    // Loop: Loop a given frames\n                    if (assignedSegment === null) {\n                        // if not playing any segments currently. play those segments and save to state\n                        animationItem.playSegments(action.frames, true);\n                        assignedSegment = action.frames;\n                    } else {\n                        // if playing any segments currently.\n                        //check if segments in state are equal to the frames selected by action\n                        if (assignedSegment !== action.frames) {\n                            // if they are not equal. new segments are to be loaded\n                            animationItem.playSegments(action.frames, true);\n                            assignedSegment = action.frames;\n                        } else if (animationItem.isPaused) {\n                            // if they are equal the play method must be called only if lottie is paused\n                            animationItem.playSegments(action.frames, true);\n                            assignedSegment = action.frames;\n                        }\n                    }\n                }\n                if (action.type === \"play\" && animationItem.isPaused) {\n                    // Play: Reset segments and continue playing full animation from current position\n                    animationItem.resetSegments(true);\n                    animationItem.play();\n                }\n                if (action.type === \"stop\") {\n                    // Stop: Stop playback\n                    animationItem.goToAndStop(action.frames[0] - animationItem.firstFrame - 1, true);\n                }\n            };\n            document.addEventListener(\"scroll\", scrollHandler);\n            return function() {\n                document.removeEventListener(\"scroll\", scrollHandler);\n            };\n        };\n        var cursorModeHandler = function cursorModeHandler() {\n            var handleCursor = function handleCursor(_x, _y) {\n                var x = _x;\n                var y = _y;\n                // Resolve cursor position if cursor is inside container\n                if (x !== -1 && y !== -1) {\n                    // Get container cursor position\n                    var pos = getContainerCursorPosition(wrapper, x, y);\n                    // Use the resolved position\n                    x = pos.x;\n                    y = pos.y;\n                }\n                // Find the first action that satisfies the current position conditions\n                var action = actions.find(function(_ref3) {\n                    var position = _ref3.position;\n                    if (position && Array.isArray(position.x) && Array.isArray(position.y)) {\n                        return x >= position.x[0] && x <= position.x[1] && y >= position.y[0] && y <= position.y[1];\n                    }\n                    if (position && !Number.isNaN(position.x) && !Number.isNaN(position.y)) {\n                        return x === position.x && y === position.y;\n                    }\n                    return false;\n                });\n                // Skip if no matching action was found!\n                if (!action) {\n                    return;\n                }\n                // Process action types:\n                if (action.type === \"seek\" && action.position && Array.isArray(action.position.x) && Array.isArray(action.position.y) && action.frames.length === 2) {\n                    // Seek: Go to a frame based on player scroll position action\n                    var xPercent = (x - action.position.x[0]) / (action.position.x[1] - action.position.x[0]);\n                    var yPercent = (y - action.position.y[0]) / (action.position.y[1] - action.position.y[0]);\n                    animationItem.playSegments(action.frames, true);\n                    animationItem.goToAndStop(Math.ceil((xPercent + yPercent) / 2 * (action.frames[1] - action.frames[0])), true);\n                }\n                if (action.type === \"loop\") {\n                    animationItem.playSegments(action.frames, true);\n                }\n                if (action.type === \"play\") {\n                    // Play: Reset segments and continue playing full animation from current position\n                    if (animationItem.isPaused) {\n                        animationItem.resetSegments(false);\n                    }\n                    animationItem.playSegments(action.frames);\n                }\n                if (action.type === \"stop\") {\n                    animationItem.goToAndStop(action.frames[0], true);\n                }\n            };\n            var mouseMoveHandler = function mouseMoveHandler(ev) {\n                handleCursor(ev.clientX, ev.clientY);\n            };\n            var mouseOutHandler = function mouseOutHandler() {\n                handleCursor(-1, -1);\n            };\n            wrapper.addEventListener(\"mousemove\", mouseMoveHandler);\n            wrapper.addEventListener(\"mouseout\", mouseOutHandler);\n            return function() {\n                wrapper.removeEventListener(\"mousemove\", mouseMoveHandler);\n                wrapper.removeEventListener(\"mouseout\", mouseOutHandler);\n            };\n        };\n        switch(mode){\n            case \"scroll\":\n                return scrollModeHandler();\n            case \"cursor\":\n                return cursorModeHandler();\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        mode,\n        animationItem\n    ]);\n};\nvar useLottieInteractivity = function useLottieInteractivity(_ref4) {\n    var actions = _ref4.actions, mode = _ref4.mode, lottieObj = _ref4.lottieObj;\n    var animationItem = lottieObj.animationItem, View = lottieObj.View, animationContainerRef = lottieObj.animationContainerRef;\n    useInitInteractivity({\n        actions: actions,\n        animationItem: animationItem,\n        mode: mode,\n        wrapperRef: animationContainerRef\n    });\n    return View;\n};\nvar _excluded = [\n    \"style\",\n    \"interactivity\"\n];\nvar Lottie = function Lottie(props) {\n    var _a, _b, _c;\n    var style = props.style, interactivity = props.interactivity, lottieProps = _objectWithoutProperties(props, _excluded);\n    /**\n   * Initialize the 'useLottie' hook\n   */ var _useLottie = useLottie(lottieProps, style), View = _useLottie.View, play = _useLottie.play, stop = _useLottie.stop, pause = _useLottie.pause, setSpeed = _useLottie.setSpeed, goToAndStop = _useLottie.goToAndStop, goToAndPlay = _useLottie.goToAndPlay, setDirection = _useLottie.setDirection, playSegments = _useLottie.playSegments, setSubframe = _useLottie.setSubframe, getDuration = _useLottie.getDuration, destroy = _useLottie.destroy, animationContainerRef = _useLottie.animationContainerRef, animationLoaded = _useLottie.animationLoaded, animationItem = _useLottie.animationItem;\n    /**\n   * Make the hook variables/methods available through the provided 'lottieRef'\n   */ (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        if (props.lottieRef) {\n            props.lottieRef.current = {\n                play: play,\n                stop: stop,\n                pause: pause,\n                setSpeed: setSpeed,\n                goToAndPlay: goToAndPlay,\n                goToAndStop: goToAndStop,\n                setDirection: setDirection,\n                playSegments: playSegments,\n                setSubframe: setSubframe,\n                getDuration: getDuration,\n                destroy: destroy,\n                animationContainerRef: animationContainerRef,\n                animationLoaded: animationLoaded,\n                animationItem: animationItem\n            };\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        (_a = props.lottieRef) === null || _a === void 0 ? void 0 : _a.current\n    ]);\n    return useLottieInteractivity({\n        lottieObj: {\n            View: View,\n            play: play,\n            stop: stop,\n            pause: pause,\n            setSpeed: setSpeed,\n            goToAndStop: goToAndStop,\n            goToAndPlay: goToAndPlay,\n            setDirection: setDirection,\n            playSegments: playSegments,\n            setSubframe: setSubframe,\n            getDuration: getDuration,\n            destroy: destroy,\n            animationContainerRef: animationContainerRef,\n            animationLoaded: animationLoaded,\n            animationItem: animationItem\n        },\n        actions: (_b = interactivity === null || interactivity === void 0 ? void 0 : interactivity.actions) !== null && _b !== void 0 ? _b : [],\n        mode: (_c = interactivity === null || interactivity === void 0 ? void 0 : interactivity.mode) !== null && _c !== void 0 ? _c : \"scroll\"\n    });\n};\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lottie-react/build/index.es.js\n");

/***/ })

};
;